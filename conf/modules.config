/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}


//
// my pipeline moudules
//

process {

    withName: 'SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/bam" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/bam" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    if (!params.skip_filter) {
        withName: 'SAMTOOLS_VIEW' {
            ext.args   = params.samtools_view_args ?: ''
            ext.prefix = { "${meta.id}.filtered" }
            publishDir = [
                path: { "${params.outdir}/bam" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
    }

    withName: 'NFCORE_WUTEST:WUTEST:BAM_STATS_ORIGINAL:.*' {
        ext.prefix = { "${meta.id}.original.bam" }
        publishDir = [
            path: { "${params.outdir}/bam_stats" },
            mode: params.publish_dir_mode,
            pattern: "*.{stats,flagstat,idxstats}"
        ]
    }

    withName: 'NFCORE_WUTEST:WUTEST:BAM_STATS_CLEANED:.*' {
        ext.prefix = { "${meta.id}.cleaned.bam" }
        publishDir = [
            path: { "${params.outdir}/bam_stats" },
            mode: params.publish_dir_mode,
            pattern: "*.{stats,flagstat,idxstats}"
        ]
    }

    withName: 'COUNT_BAM_READS' {
        ext.prefix = { "${meta.id}.readcounts" }
        publishDir = [
            path: { "${params.outdir}/read_counts" },
            mode: params.publish_dir_mode,
            pattern: "*.{json}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BEDTOOLS_INTERSECT' {
        ext.args   = '-u -f 1'
        ext.prefix = { "${meta.id}.regions" }
        task.ext.suffix = 'bam'
        publishDir = [
            path: { "${params.outdir}/bam_regions" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'BAM_TO_FASTA' {
        ext.prefix = { "${meta.id}.regions" }
        publishDir = [
            path: { "${params.outdir}/bam_fasta" },
            mode: params.publish_dir_mode,
            pattern: "*.{fasta}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    if (!params.skip_bamqc) {
        process {
            withName: 'QUALIMAP_BAMQC' {
                publishDir = [
                    path: { "${params.outdir}/qualimap" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

    if (!params.skip_picard) {
        process {
            withName: 'PICARD_MARKDUPLICATES' {
                ext.args   = '-REMOVE_DUPLICATES true'
                publishDir = [
                    path: { "${params.outdir}/dedupe" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

}
